// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyToolsYourToolsBackend.Domain.DbContexts;

namespace MyToolsYourToolsBackend.Domain.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190123205704_NotifcationAndOpinionAdded")]
    partial class NotifcationAndOpinionAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyToolsYourToolsBackend.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("MyToolsYourToolsBackend.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("OfferId");

                    b.Property<Guid>("OwnerId");

                    b.Property<Guid>("TargetUserId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MyToolsYourToolsBackend.Domain.Entities.Offer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<Guid>("OwnerId");

                    b.Property<string>("Picture");

                    b.Property<int>("Status");

                    b.Property<string>("Tool");

                    b.Property<int>("ToolCategory");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("MyToolsYourToolsBackend.Domain.Entities.Opinion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Message");

                    b.Property<Guid>("RatedUserId");

                    b.Property<Guid>("RatingUserId");

                    b.HasKey("Id");

                    b.HasIndex("RatedUserId");

                    b.HasIndex("RatingUserId");

                    b.ToTable("Opinions");
                });

            modelBuilder.Entity("MyToolsYourToolsBackend.Domain.Entities.Rent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BorrowerId");

                    b.Property<Guid>("OfferId");

                    b.HasKey("Id");

                    b.HasIndex("BorrowerId");

                    b.HasIndex("OfferId");

                    b.ToTable("Rents");
                });

            modelBuilder.Entity("MyToolsYourToolsBackend.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("Points");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MyToolsYourToolsBackend.Domain.Entities.UserGroup", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("GroupId");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("MyToolsYourToolsBackend.Domain.Entities.Notification", b =>
                {
                    b.HasOne("MyToolsYourToolsBackend.Domain.Entities.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyToolsYourToolsBackend.Domain.Entities.User", "Owner")
                        .WithMany("SentNotifications")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyToolsYourToolsBackend.Domain.Entities.User", "TargetUser")
                        .WithMany("TargetedNotifications")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyToolsYourToolsBackend.Domain.Entities.Offer", b =>
                {
                    b.HasOne("MyToolsYourToolsBackend.Domain.Entities.User", "Owner")
                        .WithMany("Offers")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyToolsYourToolsBackend.Domain.Entities.Opinion", b =>
                {
                    b.HasOne("MyToolsYourToolsBackend.Domain.Entities.User", "RatedUser")
                        .WithMany("ReceivedOpinions")
                        .HasForeignKey("RatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyToolsYourToolsBackend.Domain.Entities.User", "RatingUser")
                        .WithMany("GivenOpinions")
                        .HasForeignKey("RatingUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyToolsYourToolsBackend.Domain.Entities.Rent", b =>
                {
                    b.HasOne("MyToolsYourToolsBackend.Domain.Entities.User", "Borrower")
                        .WithMany("Rents")
                        .HasForeignKey("BorrowerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyToolsYourToolsBackend.Domain.Entities.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyToolsYourToolsBackend.Domain.Entities.UserGroup", b =>
                {
                    b.HasOne("MyToolsYourToolsBackend.Domain.Entities.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyToolsYourToolsBackend.Domain.Entities.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
